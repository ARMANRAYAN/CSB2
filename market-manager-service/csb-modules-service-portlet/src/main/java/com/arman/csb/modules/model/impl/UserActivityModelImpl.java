package com.arman.csb.modules.model.impl;

import com.arman.csb.modules.model.UserActivity;
import com.arman.csb.modules.model.UserActivityModel;
import com.arman.csb.modules.model.UserActivitySoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the UserActivity service. Represents a row in the &quot;CSBModules_UserActivity&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.arman.csb.modules.model.UserActivityModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link UserActivityImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see UserActivityImpl
 * @see com.arman.csb.modules.model.UserActivity
 * @see com.arman.csb.modules.model.UserActivityModel
 * @generated
 */
@JSON(strict = true)
public class UserActivityModelImpl extends BaseModelImpl<UserActivity>
    implements UserActivityModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a user activity model instance should use the {@link com.arman.csb.modules.model.UserActivity} interface instead.
     */
    public static final String TABLE_NAME = "CSBModules_UserActivity";
    public static final Object[][] TABLE_COLUMNS = {
            { "uuid_", Types.VARCHAR },
            { "id_", Types.BIGINT },
            { "groupId", Types.BIGINT },
            { "companyId", Types.BIGINT },
            { "userId", Types.BIGINT },
            { "userName", Types.VARCHAR },
            { "createDate", Types.TIMESTAMP },
            { "entity", Types.VARCHAR },
            { "action", Types.INTEGER },
            { "importance", Types.INTEGER },
            { "data_", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table CSBModules_UserActivity (uuid_ VARCHAR(75) null,id_ LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,entity VARCHAR(75) null,action INTEGER,importance INTEGER,data_ VARCHAR(2000) null)";
    public static final String TABLE_SQL_DROP = "drop table CSBModules_UserActivity";
    public static final String ORDER_BY_JPQL = " ORDER BY userActivity.id ASC";
    public static final String ORDER_BY_SQL = " ORDER BY CSBModules_UserActivity.id_ ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.arman.csb.modules.model.UserActivity"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.arman.csb.modules.model.UserActivity"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.arman.csb.modules.model.UserActivity"),
            true);
    public static long ACTION_COLUMN_BITMASK = 1L;
    public static long COMPANYID_COLUMN_BITMASK = 2L;
    public static long ENTITY_COLUMN_BITMASK = 4L;
    public static long GROUPID_COLUMN_BITMASK = 8L;
    public static long USERID_COLUMN_BITMASK = 16L;
    public static long UUID_COLUMN_BITMASK = 32L;
    public static long ID_COLUMN_BITMASK = 64L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.arman.csb.modules.model.UserActivity"));
    private static ClassLoader _classLoader = UserActivity.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            UserActivity.class
        };
    private String _uuid;
    private String _originalUuid;
    private long _id;
    private long _groupId;
    private long _originalGroupId;
    private boolean _setOriginalGroupId;
    private long _companyId;
    private long _originalCompanyId;
    private boolean _setOriginalCompanyId;
    private long _userId;
    private String _userUuid;
    private long _originalUserId;
    private boolean _setOriginalUserId;
    private String _userName;
    private Date _createDate;
    private String _entity;
    private String _originalEntity;
    private Short _action;
    private Short _originalAction;
    private boolean _setOriginalAction;
    private Short _importance;
    private String _data;
    private long _columnBitmask;
    private UserActivity _escapedModel;

    public UserActivityModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static UserActivity toModel(UserActivitySoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        UserActivity model = new UserActivityImpl();

        model.setUuid(soapModel.getUuid());
        model.setId(soapModel.getId());
        model.setGroupId(soapModel.getGroupId());
        model.setCompanyId(soapModel.getCompanyId());
        model.setUserId(soapModel.getUserId());
        model.setUserName(soapModel.getUserName());
        model.setCreateDate(soapModel.getCreateDate());
        model.setEntity(soapModel.getEntity());
        model.setAction(soapModel.getAction());
        model.setImportance(soapModel.getImportance());
        model.setData(soapModel.getData());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<UserActivity> toModels(UserActivitySoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<UserActivity> models = new ArrayList<UserActivity>(soapModels.length);

        for (UserActivitySoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _id;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _id;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return UserActivity.class;
    }

    @Override
    public String getModelClassName() {
        return UserActivity.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("uuid", getUuid());
        attributes.put("id", getId());
        attributes.put("groupId", getGroupId());
        attributes.put("companyId", getCompanyId());
        attributes.put("userId", getUserId());
        attributes.put("userName", getUserName());
        attributes.put("createDate", getCreateDate());
        attributes.put("entity", getEntity());
        attributes.put("action", getAction());
        attributes.put("importance", getImportance());
        attributes.put("data", getData());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        String uuid = (String) attributes.get("uuid");

        if (uuid != null) {
            setUuid(uuid);
        }

        Long id = (Long) attributes.get("id");

        if (id != null) {
            setId(id);
        }

        Long groupId = (Long) attributes.get("groupId");

        if (groupId != null) {
            setGroupId(groupId);
        }

        Long companyId = (Long) attributes.get("companyId");

        if (companyId != null) {
            setCompanyId(companyId);
        }

        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        String userName = (String) attributes.get("userName");

        if (userName != null) {
            setUserName(userName);
        }

        Date createDate = (Date) attributes.get("createDate");

        if (createDate != null) {
            setCreateDate(createDate);
        }

        String entity = (String) attributes.get("entity");

        if (entity != null) {
            setEntity(entity);
        }

        Short action = (Short) attributes.get("action");

        if (action != null) {
            setAction(action);
        }

        Short importance = (Short) attributes.get("importance");

        if (importance != null) {
            setImportance(importance);
        }

        String data = (String) attributes.get("data");

        if (data != null) {
            setData(data);
        }
    }

    @JSON
    @Override
    public String getUuid() {
        if (_uuid == null) {
            return StringPool.BLANK;
        } else {
            return _uuid;
        }
    }

    @Override
    public void setUuid(String uuid) {
        if (_originalUuid == null) {
            _originalUuid = _uuid;
        }

        _uuid = uuid;
    }

    public String getOriginalUuid() {
        return GetterUtil.getString(_originalUuid);
    }

    @JSON
    @Override
    public long getId() {
        return _id;
    }

    @Override
    public void setId(long id) {
        _id = id;
    }

    @JSON
    @Override
    public long getGroupId() {
        return _groupId;
    }

    @Override
    public void setGroupId(long groupId) {
        _columnBitmask |= GROUPID_COLUMN_BITMASK;

        if (!_setOriginalGroupId) {
            _setOriginalGroupId = true;

            _originalGroupId = _groupId;
        }

        _groupId = groupId;
    }

    public long getOriginalGroupId() {
        return _originalGroupId;
    }

    @JSON
    @Override
    public long getCompanyId() {
        return _companyId;
    }

    @Override
    public void setCompanyId(long companyId) {
        _columnBitmask |= COMPANYID_COLUMN_BITMASK;

        if (!_setOriginalCompanyId) {
            _setOriginalCompanyId = true;

            _originalCompanyId = _companyId;
        }

        _companyId = companyId;
    }

    public long getOriginalCompanyId() {
        return _originalCompanyId;
    }

    @JSON
    @Override
    public long getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(long userId) {
        _columnBitmask |= USERID_COLUMN_BITMASK;

        if (!_setOriginalUserId) {
            _setOriginalUserId = true;

            _originalUserId = _userId;
        }

        _userId = userId;
    }

    @Override
    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    @Override
    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    public long getOriginalUserId() {
        return _originalUserId;
    }

    @JSON
    @Override
    public String getUserName() {
        if (_userName == null) {
            return StringPool.BLANK;
        } else {
            return _userName;
        }
    }

    @Override
    public void setUserName(String userName) {
        _userName = userName;
    }

    @JSON
    @Override
    public Date getCreateDate() {
        return _createDate;
    }

    @Override
    public void setCreateDate(Date createDate) {
        _createDate = createDate;
    }

    @JSON
    @Override
    public String getEntity() {
        if (_entity == null) {
            return StringPool.BLANK;
        } else {
            return _entity;
        }
    }

    @Override
    public void setEntity(String entity) {
        _columnBitmask |= ENTITY_COLUMN_BITMASK;

        if (_originalEntity == null) {
            _originalEntity = _entity;
        }

        _entity = entity;
    }

    public String getOriginalEntity() {
        return GetterUtil.getString(_originalEntity);
    }

    @JSON
    @Override
    public Short getAction() {
        return _action;
    }

    @Override
    public void setAction(Short action) {
        _columnBitmask |= ACTION_COLUMN_BITMASK;

        if (!_setOriginalAction) {
            _setOriginalAction = true;

            _originalAction = _action;
        }

        _action = action;
    }

    public Short getOriginalAction() {
        return _originalAction;
    }

    @JSON
    @Override
    public Short getImportance() {
        return _importance;
    }

    @Override
    public void setImportance(Short importance) {
        _importance = importance;
    }

    @JSON
    @Override
    public String getData() {
        if (_data == null) {
            return StringPool.BLANK;
        } else {
            return _data;
        }
    }

    @Override
    public void setData(String data) {
        _data = data;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
            UserActivity.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public UserActivity toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (UserActivity) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        UserActivityImpl userActivityImpl = new UserActivityImpl();

        userActivityImpl.setUuid(getUuid());
        userActivityImpl.setId(getId());
        userActivityImpl.setGroupId(getGroupId());
        userActivityImpl.setCompanyId(getCompanyId());
        userActivityImpl.setUserId(getUserId());
        userActivityImpl.setUserName(getUserName());
        userActivityImpl.setCreateDate(getCreateDate());
        userActivityImpl.setEntity(getEntity());
        userActivityImpl.setAction(getAction());
        userActivityImpl.setImportance(getImportance());
        userActivityImpl.setData(getData());

        userActivityImpl.resetOriginalValues();

        return userActivityImpl;
    }

    @Override
    public int compareTo(UserActivity userActivity) {
        long primaryKey = userActivity.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof UserActivity)) {
            return false;
        }

        UserActivity userActivity = (UserActivity) obj;

        long primaryKey = userActivity.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        UserActivityModelImpl userActivityModelImpl = this;

        userActivityModelImpl._originalUuid = userActivityModelImpl._uuid;

        userActivityModelImpl._originalGroupId = userActivityModelImpl._groupId;

        userActivityModelImpl._setOriginalGroupId = false;

        userActivityModelImpl._originalCompanyId = userActivityModelImpl._companyId;

        userActivityModelImpl._setOriginalCompanyId = false;

        userActivityModelImpl._originalUserId = userActivityModelImpl._userId;

        userActivityModelImpl._setOriginalUserId = false;

        userActivityModelImpl._originalEntity = userActivityModelImpl._entity;

        userActivityModelImpl._originalAction = userActivityModelImpl._action;

        userActivityModelImpl._setOriginalAction = false;

        userActivityModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<UserActivity> toCacheModel() {
        UserActivityCacheModel userActivityCacheModel = new UserActivityCacheModel();

        userActivityCacheModel.uuid = getUuid();

        String uuid = userActivityCacheModel.uuid;

        if ((uuid != null) && (uuid.length() == 0)) {
            userActivityCacheModel.uuid = null;
        }

        userActivityCacheModel.id = getId();

        userActivityCacheModel.groupId = getGroupId();

        userActivityCacheModel.companyId = getCompanyId();

        userActivityCacheModel.userId = getUserId();

        userActivityCacheModel.userName = getUserName();

        String userName = userActivityCacheModel.userName;

        if ((userName != null) && (userName.length() == 0)) {
            userActivityCacheModel.userName = null;
        }

        Date createDate = getCreateDate();

        if (createDate != null) {
            userActivityCacheModel.createDate = createDate.getTime();
        } else {
            userActivityCacheModel.createDate = Long.MIN_VALUE;
        }

        userActivityCacheModel.entity = getEntity();

        String entity = userActivityCacheModel.entity;

        if ((entity != null) && (entity.length() == 0)) {
            userActivityCacheModel.entity = null;
        }

        userActivityCacheModel.action = getAction();

        userActivityCacheModel.importance = getImportance();

        userActivityCacheModel.data = getData();

        String data = userActivityCacheModel.data;

        if ((data != null) && (data.length() == 0)) {
            userActivityCacheModel.data = null;
        }

        return userActivityCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(23);

        sb.append("{uuid=");
        sb.append(getUuid());
        sb.append(", id=");
        sb.append(getId());
        sb.append(", groupId=");
        sb.append(getGroupId());
        sb.append(", companyId=");
        sb.append(getCompanyId());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", userName=");
        sb.append(getUserName());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append(", entity=");
        sb.append(getEntity());
        sb.append(", action=");
        sb.append(getAction());
        sb.append(", importance=");
        sb.append(getImportance());
        sb.append(", data=");
        sb.append(getData());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(37);

        sb.append("<model><model-name>");
        sb.append("com.arman.csb.modules.model.UserActivity");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>uuid</column-name><column-value><![CDATA[");
        sb.append(getUuid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupId</column-name><column-value><![CDATA[");
        sb.append(getGroupId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userName</column-name><column-value><![CDATA[");
        sb.append(getUserName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>entity</column-name><column-value><![CDATA[");
        sb.append(getEntity());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>action</column-name><column-value><![CDATA[");
        sb.append(getAction());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>importance</column-name><column-value><![CDATA[");
        sb.append(getImportance());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>data</column-name><column-value><![CDATA[");
        sb.append(getData());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
